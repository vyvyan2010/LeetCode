class Solution {
public:
	int longestValidParentheses(string s) {
		stack<int> StackPare;
		int length = s.length();
		//±éÀú×Ö·û´®
		for(int i = 0; i < length; i++)
		{
			if('(' == s[i])
			{
				StackPare.push(i);
			}
			else
			{
				if((StackPare.empty()) ||  (')'== s[StackPare.top()]))
				{
					StackPare.push(i);
				}
				else
				{
					StackPare.pop();
				}	
			}
		}
		if(StackPare.empty())
		{
			return length;
		}
		int max_valid_len = 0;
		
		int FirstValue = length;
		while(!StackPare.empty())
		{
			int SecondValue = StackPare.top();
			StackPare.pop();
			max_valid_len = max(max_valid_len, FirstValue - SecondValue -1);
			FirstValue = SecondValue;
		}
		max_valid_len = max(max_valid_len, FirstValue);
		return max_valid_len;
	};
};