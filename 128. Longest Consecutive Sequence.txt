/*****************自己实现的,时间复杂度不满足，因为是红黑树，插入需要耗费nlog(n)的时间复杂度*****************/
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int>s_int(nums.begin(), nums.end());
		int maxnum = 0;
	
		for(int value:nums)
		{
			if(s_int.find(value) == s_int.end())
			{
				continue;
			}
			s_int.erase(value);
			int pre_value = value - 1;
			int post_value = value + 1;
			while(s_int.find(pre_value) != s_int.end())
			{
				s_int.erase(pre_value);
				pre_value--;
			}
			while(s_int.find(post_value) != s_int.end())
			{
				s_int.erase(post_value);
				post_value++;
			}
			maxnum = max(post_value - pre_value - 1, maxnum);
		}
		
		return maxnum;
    }
};




/*****************自己实现的,时间复杂度不满足，因为是红黑树，插入需要耗费nlog(n)的时间复杂度*****************/
class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_set<int>s_int;
		unordered_set<int>::iterator it;
		int maxnum = 1;
		int maxnumTemp = 1;
		
		for(int i = 0; i < nums.size(); i++)
		{
			s_int.insert(nums[i]);
		}
		
		it = s_int.begin();
		int ValueBefore = *it;
		it++;
		int ValueNow = 0;
		
		for(; it != s_int.end(); it++)
		{
			ValueNow = *it;
			if(ValueNow == (ValueBefore + 1))
			{
				maxnumTemp++;
				maxnum = (maxnumTemp > maxnum) ? maxnumTemp : maxnum;
			}
			else
			{
				maxnumTemp = 1;
			}
			ValueBefore = ValueNow; 
		}
		
		return maxnum;
    }
};